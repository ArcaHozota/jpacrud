/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppok.jooq;


import jp.co.toshiba.ppok.jooq.tables.City;
import jp.co.toshiba.ppok.jooq.tables.Country;
import jp.co.toshiba.ppok.jooq.tables.Language;
import jp.co.toshiba.ppok.jooq.tables.records.CityRecord;
import jp.co.toshiba.ppok.jooq.tables.records.CountryRecord;
import jp.co.toshiba.ppok.jooq.tables.records.LanguageRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CityRecord> CITY_PKEY = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), new TableField[] { City.CITY.ID }, true);
    public static final UniqueKey<CountryRecord> COUNTRY_PKEY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), new TableField[] { Country.COUNTRY.CODE }, true);
    public static final UniqueKey<LanguageRecord> LANGUAGE_PKEY = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), new TableField[] { Language.LANGUAGE.COUNTRY_CODE, Language.LANGUAGE.LANGUAGE_ }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CityRecord, CountryRecord> CITY__FK_COUNTRY_CITY = Internal.createForeignKey(City.CITY, DSL.name("fk_country_city"), new TableField[] { City.CITY.COUNTRY_CODE }, Keys.COUNTRY_PKEY, new TableField[] { Country.COUNTRY.CODE }, true);
    public static final ForeignKey<CountryRecord, CityRecord> COUNTRY__FK_CITY_COUNTRY = Internal.createForeignKey(Country.COUNTRY, DSL.name("fk_city_country"), new TableField[] { Country.COUNTRY.CAPITAL }, Keys.CITY_PKEY, new TableField[] { City.CITY.ID }, true);
    public static final ForeignKey<LanguageRecord, CountryRecord> LANGUAGE__FK_COUNTRY_LANGUAGE = Internal.createForeignKey(Language.LANGUAGE, DSL.name("fk_country_language"), new TableField[] { Language.LANGUAGE.COUNTRY_CODE }, Keys.COUNTRY_PKEY, new TableField[] { Country.COUNTRY.CODE }, true);
}
