/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppok.jooq.tables;


import java.util.function.Function;

import jp.co.toshiba.ppok.jooq.Public;
import jp.co.toshiba.ppok.jooq.tables.records.CityInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityInfo extends TableImpl<CityInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.city_info</code>
     */
    public static final CityInfo CITY_INFO = new CityInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CityInfoRecord> getRecordType() {
        return CityInfoRecord.class;
    }

    /**
     * The column <code>public.city_info.id</code>.
     */
    public final TableField<CityInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.city_info.continent</code>.
     */
    public final TableField<CityInfoRecord, String> CONTINENT = createField(DSL.name("continent"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.city_info.nation</code>.
     */
    public final TableField<CityInfoRecord, String> NATION = createField(DSL.name("nation"), SQLDataType.VARCHAR(52), this, "");

    /**
     * The column <code>public.city_info.name</code>.
     */
    public final TableField<CityInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>public.city_info.district</code>.
     */
    public final TableField<CityInfoRecord, String> DISTRICT = createField(DSL.name("district"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.city_info.population</code>.
     */
    public final TableField<CityInfoRecord, Integer> POPULATION = createField(DSL.name("population"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.city_info.language</code>.
     */
    public final TableField<CityInfoRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.VARCHAR(30), this, "");

    private CityInfo(Name alias, Table<CityInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private CityInfo(Name alias, Table<CityInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.city_info</code> table reference
     */
    public CityInfo(String alias) {
        this(DSL.name(alias), CITY_INFO);
    }

    /**
     * Create an aliased <code>public.city_info</code> table reference
     */
    public CityInfo(Name alias) {
        this(alias, CITY_INFO);
    }

    /**
     * Create a <code>public.city_info</code> table reference
     */
    public CityInfo() {
        this(DSL.name("city_info"), null);
    }

    public <O extends Record> CityInfo(Table<O> child, ForeignKey<O, CityInfoRecord> key) {
        super(child, key, CITY_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public CityInfo as(String alias) {
        return new CityInfo(DSL.name(alias), this);
    }

    @Override
    public CityInfo as(Name alias) {
        return new CityInfo(alias, this);
    }

    @Override
    public CityInfo as(Table<?> alias) {
        return new CityInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CityInfo rename(String name) {
        return new CityInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CityInfo rename(Name name) {
        return new CityInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CityInfo rename(Table<?> name) {
        return new CityInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
